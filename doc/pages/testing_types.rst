=================
Виды тестирования
=================

Проверка синтаксиса и стиля (Syntax and Style Check)
----------------------------------------------------

Самый простой вид тестирования. Просто проверяет нет ли синтаксических ошибок в модулях и манифестах при помощи
Puppet агента. Запустить агент в режиме проверки синтаксиса манифеста можно так::

puppet parser validate manifest.pp

Шаблоны erb тоже можно проверить на наличие синтаксических ошибок. Для этого нужно сначала собрать шаблон, а потом
передать его интерпретатору Ruby в режиме проверки::

erb -P -x -T ’-’ mytemplate.erb | ruby -c

Код Puppet желательно должен следовать стандартам стиля, которые описаны в документации на сайте PuppetLabs.

http://docs.puppetlabs.com/guides/style_guide.html

Чтобы проверить модуль или манифест нужно установить puppet-lint::

gem install puppet-lint

Теперь можно проверить файл::

puppet-lint --with-filename manifest.pp

Эти проверки автоматически выполняются современными средами разработки и ошибки отмечаются красным цветом.
Если все разработчики будут использовать полноценные среды разработки, а не консольные редакторы,
то в этих тестах не будет необходимости.

В Jenkins создана задача проверки синтаксиса Puppet файлов, но нет проверки стиля,
которую скорее всего не пройдёт больше половины модулей.

*Полная проверка всего кода займёт не более минуты.*

Модульное тестирование (Unit testing)
-------------------------------------

Проверяет соответствует ли логика работы модуля спецификации, записанной в виде **Rspec** тестов.
При правильно построенном процессе разработки может помочь избежать логических и смысловых ошибок,
но требует много  времени и труда для разработки и поддержания всего набора тестов в актуальном состоянии.
В отличие от обычного программного обеспечения успешность работы Puppet зависит не только от корректности кода,
но и от многих других факторов. Это значительно уменьшает эффективность модульного тестирования, но всё же не делает
его полностью бесполезным. Unit тесты Puppet могут определить многие ошибки уже при сборке каталога,
включая довольно неочевидные и незаметные, которые могут даже не появится на следующих этапах тестирования,
а только при некоторых условиях.

Модульные тесты можно писать и запускать прямо в процессе разработки, что при правильном использовании может
быть очень полезно. Спецификация также выполняет функцию формальной документации, котораяя описывает что
должен делать каждый класс и как его можно использовать.

Тесты выполняются очень быстро и не требуют никаких виртуальных машин или специальных окружений.
На тестовом сервере можно иногда запускать все тесты на разных версиях Puppet, если нам будет требоваться их поддержка.
Приведение в порядок всех спецификаций потребует очень много времени и сил, при этом дав не очень большой результат.

*Запуск всех Unit тестов займёт несколько минут.*

Интеграционное тестирование (Integration testing)
-------------------------------------------------

Проверяет работоспособность всего модуля в целом, или даже нескольких модулей сразу. Для из запуска требуется
подготовка специальных тестовых манифестов в каталоге tests каждого модуля. Эти манифесты должны демонстрировать
работу тестируемого модуля во всех его режимах, и, кроме запуска тестов, представляют собой отличный набор
примеров использования модуля.

Для выполнения этих тестов потребуется разработать набор скриптов для создания тестовых окружений,
запуска тестов и сборки их результатов в Jenkins в формате **xUnit**.

Интеграционные тесты имеют гораздо больший охват чем модульные. Они проверяют работоспособность, одного или даже
нескольких используемых вместе модулей на требуемом окружении, или нескольких поддерживаемых окружениях.
При этом проверяется как корректность кода, так и работоспособность всего используемого программного обеспечения вместе.

Создание тестовых манифестов намного проще, чем написание **Rspec** тестов, и интеграционное тестирование гораздо
более полезно, поэтому лучше сделать фокус на него, а не на модульное тестирование.

*Проход всех тестов может занять до одного часа.*

Системное тестирование
----------------------

При системном тестировании проверяется работа всей системы целиком, от установки до функционирования каждого
компонента. Полное разворачивание системы потребует много времени и несколько машин. После успешного развёртывания
будет нужно провести два вида тестов:

- Общий тест (Smoke Test) - должен быстро выполнить несколько коротких тестов, желательно немного затрагивающих
  все компоненты. Позволяет быстро дать ответ на вопрос было ли развёртывание успешным.
- Приёмочный тест (Acceptance Test) - должен проверить работоспособность всей системы при помощи набора тестов Tempest.

Системное тестирование проводится довольно долго и требует много ресурсов сервера. Не имеет смысла полностью его
автоматизировать и запускать регулярно. Скорее всего будет оптимальным запускать тест в полуавтоматическом режиме
при подготовке к релизу.

*Полное развёртывание и тестирование может занять несколько часов.*
