=================================================
Интеграционное тестирование (Integration testing)
=================================================

Проверяет работоспособность всего модуля в целом, или даже нескольких модулей сразу. Для из запуска требуется
подготовка специальных тестовых манифестов в каталоге tests каждого модуля. Эти манифесты должны демонстрировать
работу тестируемого модуля во всех его режимах, и, кроме запуска тестов, представляют собой отличный набор
примеров использования модуля.

Для выполнения этих тестов потребуется разработать набор скриптов для создания тестовых окружений,
запуска тестов и сборки их результатов в Jenkins в формате **xUnit**.

Интеграционные тесты имеют гораздо больший охват чем модульные. Они проверяют работоспособность, одного или даже
нескольких используемых вместе модулей на требуемом окружении, или нескольких поддерживаемых окружениях.
При этом проверяется как корректность кода, так и работоспособность всего используемого программного обеспечения вместе.

Создание тестовых манифестов намного проще, чем написание **Rspec** тестов, и интеграционное тестирование гораздо
более полезно, поэтому лучше сделать фокус на него, а не на модульное тестирование.

Алгоритм тестирования
---------------------

Для проведения интеграционного тестирования Puppet модуля потребуется создать специальное тестовое окружение.
Применение манифеста должно происходить внутри этого окружения.

Процесс тестирования можно описать следующими этапами:

.. image:: images/integration_tests_scheme.png
   :alt: Схема интеграционного теста
   :align: center

1. Сначала нужно создать тестовую виртуальную систему из заранее приготовленного образа одной из поддерживаемых
   операционных систем.
2. Теперь можно создать снапшот созданного окружения, чтобы можео было вернуться к исходному состоянию.
3. Запускаем первый тест внутри тестовой системыи сохраняем его результат.
4. Восстанавливаем сохранённый снапшот и возврашаемся к исходному состоянию.
5. Запускаем следующий тест и снова восстанавливаем снапшот после него.
6. Выводим результаты всех тестов в формате xUnit и сохраняем их в Jenkins.

Реализация теста
----------------

Для того чтобы Jenkins мог запускать такие тесты для каждого Puppet модуля потребуется набор тестовых скриптов по
одному для каждого из модулей. Один скрипт должен создавать требуемое окружение и запускать все тесты своего модуля.
Для создания и поддержки в актуальном состоянии набора таких скриптов будет удобно воспользоваться шаблонизатором,
который сможет из заранее созданного шаблона сделать по версии тестового скрипта для каждого модуля.

Рассмотрим схему его работы:

.. image:: images/make_tests_templates.png
   :alt: Схема интеграционного теста
   :align: center

- Сначала нужно подготовить скрипт, который мог вы выполнить тест по описаному выше алгоритму и сохранить его
  в виде шаблона.
- Скрипт MakeTests сканирует каталог с модулями Puppet и находит в нём все тестовые манифесты.
- Для каждого модуля берётся скрипт-шаблон и в него подставляются переменные путей и имен обрабатываемого модуля и
  создаётся метод для запуска каждого тестового манифеста.
- Все собранные скрипты сохраняются в отдельном каталоге
- Создаётся задача в Jenkins, которая будет запускать все тестовые методы каждого скрипта и сохранять их результаты.

Использование скрипта MakeTests
-------------------------------

Скрипт MakeTests состоит из пяти отдельных классов:

- **MakeTests** - основной класс скрипта, который обеспечивает запуск программы, чтение и запись файлов.
- **PuppetModule** - представляет каждый модуль Puppet. Объект MakeTests создаёт список объектов этого типа для каждого
  модуля Puppet.
- **PuppetTest** - представляет отдельный тест. Объект PuppetModule создаёт список этих объектов для каждого найденного
  тестовго манифеста.
- **Interface** - вспомогательный класс. Управляет выводом ошибок и отладочной информации.
- **Color** - вспомогательный класс. Позволяет использовать цвета в терминале.

При запуске MakeTests нужно передать следующие аргументы:

- Путь к каталогу, куда будут сохранены собранные тестовые скрипты.
- Путь к каталогу с Puppet модулями, для которых создаются тесты.
- Опционально. Путь к модулям Puppet на той системе, где будут запускаться тесты. Если тесты создаются на той же самой
  системе, то этот путь будет таким же, как и предыдущий, и его можно не указывать.

Использование шаблонов
----------------------

MakeTests использует шаблонизатор **jinja2**. Для каждого модуля будет использован шаблон по умолчанию из каталога
**templates**, но его можно переопределить если для некоторых модулей требуется специальный шаблон.

В шаблоне можно использовать набор переменных, который передаётся ему скриптом.

**Общие переменные**

- *modules_path* - Путь до модулей Puppet на хост-системе тестирования.
- *local_modules_path* - Путь до модулей Puppet на той системе, где были собраны тесты. Может быть равно modules_path.
- *internal_modules_path* - Путь до модулей Puppet внутри гостевой системы.
- *internal_manifests_path* - Путь до манифестов внутри гостевой системы.
- *tests_directory_path* - Путь до каталога, в который были сохранены файлы тестов.

**PuppetModule**

- *module.name* - Название этого модуля
- *module.path* - Путь до модуля на той системе, гда были собраны тесты
- *module.tests* - Список объектов PuppetTest этого модуля.

**PuppetTest**

- *test.name* - Название этого теста.
- *test.path* - Путь до этого теста. Относительно корня модуля и не включая имя файла.
- *test.file* - Имя файла этого теста.

Файлы шаблонов могуть включать друг друга, позволяя собирать сложный скрипт из нескольких кусков, которые могут быть
общими для нескольких скриптов. Шаблон может расши рять другой шаблон, заменяя в нём некоторые блоки кода.

В шаблонах можно использовать циклы, условные конструкции, переменные и фильтры. Про использование шаблонизатора
**jinja2** можно узнать больше здесь http://jinja.pocoo.org и в этой документации, которая
хорошо описывает синтаксис, который можно использовать в шаблонах http://jinja.pocoo.org/docs/jinja-docs.pdf
